{"mappings":"AAsYC,WACC,IACE,MAAMA,QAAaC,MACjB,iEAGiBD,EAAKE,M,CAExB,MAAOC,GACPC,QAAQC,IAAI,QAASF,EAAMG,Q,CAE9B,EAXA,GAkHD,MAEMC,EAAMC,SAASC,cAAc,SAElC,WACC,IACE,MAAMT,QAAaC,MANX,kEAOFS,QAAEA,SAAkBV,EAAKE,OAEzBS,QAAaV,MACjB,uCAAuCS,sBAEnCE,MAAEA,SAAgBD,EAAKT,QAQjC,SAAsBW,GACpB,MAAMC,EAAOD,EACVE,KAAI,EAACC,MAAEA,EAAKC,KAAEA,KAAW,aAAaD,WAAeC,SACrDC,KAAK,IAERX,EAAIY,UAAYL,C,CAXdM,CAAaR,E,CACb,MAAOT,GACPC,QAAQC,IAAI,QAASF,EAAMG,Q,CAE9B,EAdA","sources":["src/js/tasks.js"],"sourcesContent":["// Напиши клас Client який створює об'єкт /\n// /з властивостями login email\n//   / / Оголоси приватні властивості #login #email,\n//доступ до яких зроби через геттер та сеттер login emai\n// class Client {\n//   #login;\n//   #email;\n//   constructor({ login, email }) {\n//     this.#email = email;\n//     this.#login = login;\n//   }\n\n//   get login() {\n//     return this.#login; //   }\n//   set login(NewLogin) {\n//     this.#login = NewLogin;\n//   } //   get email() {\n//     return this.#email;\n//   }\n//   set email(NewEmail) {\n//     this.#email = NewEmail;\n//   }\n// }\n// const NewClient = new Client({ login: 'fhfhhfh', email: 'dffkjhif' })\n// console.log('NewClient: ', NewClient)\n// console.log(NewClient.email)\n// console.log(NewClient.login)\n// console.log((NewClient.email = 'dd12'))\n// console.log(NewClient.email);\n\n//Напиши клас Notes, який управляє колекцією нотаток у\n//властивості items.\n//Нотатка - це об'єкт із властивостями text priority\n//Додай класу статичну властивість Priopity,\n//у якій зберігатиметься об'єкт із пріоритетами.\n//Додай методи addNote(note), removeNote(text)\n//updatePriority(text, newPriority)\n\n// class Notes {\n//   static Priopity = [];\n//   constructor({ text, priority }) {\n//     this.items = text;\n//     this.priopity = priority;\n//   }\n//   addNote(note) {\n//     this.items.push(note); //   } //   updatePriority(text, newPriority) {} // }\n// const note = new Notes({ text: 'jfdhfhdsfhasifhihsaf', priopity: [] });\n\n// note.updatePriority({ text: '111', newPriority: 'base1' });\n// note.addNote({ text: '222', newPriority: 'base2' });\n// note.addNote({ text: '333', newPriority: 'base3' });\n// note.addNote('hshfusdhf');\n// console.log('note: ', note);\n\n// 09/09/2022 test task\n// Делегування подій\n// 1. Коли користувач клікає на будь-яку комірку\n// із таблиці, потрібно її зробити активною - добавити клас.active\n// 3. В кожному рядку кожній третій комірці задавати клас .active-third\n// 2. Коли користувач клікає на іншу комірку, вона робиться активною, а всі інші стають неактивними\n// 3. Після перезавантаження сторінки активна комірка зберігається\n\n// const board = document.querySelector('.board');\n// console.log('board: ', board);\n\n// board.addEventListener('click', evt => {\n//   console.dir(evt.currentTarget);\n//   if (evt.target.tagName === 'TD') {\n//     evt.target.classList.toggle('active');\n//   }\n// });\n\n// ! CODEWARS\n\n// ? An isogram is a word that has no repeating letters, consecutive or non-consecutive.\n// ? Implement a function that determines whether a string\n// ? that contains only letters is an isogram.\n// ? Assume the empty string is an isogram.Ignore letter case.\n\n// function isIsogram(str) {\n//   const newStr = str.toLowerCase();\n\n//   for (let i = 0; i < newStr.length; i++) {\n//     for (let j = i + 1; j < newStr.length; j++) {\n//       if (newStr[i] === newStr[j]) {\n//         return false;\n//       }\n//     }\n//   }\n\n//   return true;\n// }\n\nfunction isIsogram(str) {\n  return new Set(str.toLowerCase()).size == str.length;\n}\n\n// function isIsogram(str) {\n//   return !str.match(/([a-z]).*\\1/i);\n// }\n\n// console.log(isIsogram('absa'));\n// console.log(isIsogram('abc'));\n// console.log(isIsogram('isogram'));\n\n// ? You are given an array(which will have a length of at least 3,\n// ? but could be very large) containing integers.\n// ? The array is either entirely comprised of odd\n// ? integers or entirely comprised of even integers except\n// ? for a single integer N.Write a method that takes the array\n// ? as an argument and returns this \"outlier\" N\n\n// function findOutlier(integers) {\n// return [...integers].filter(even).length >= 2 ? integers.find(odd)\n//     : integers.find(even);\n// }\n// function even(num) {\n//   return num % 2 === 0;\n// }\n// function odd(num) {\n//   return !even(num);\n// }\n\nfunction findOutlier(integers) {\n  const even = integers.filter(int => int % 2 === 0);\n  const odd = integers.filter(int => int % 2 !== 0);\n  return even.length === 1 ? even[0] : odd[0];\n}\n\n// console.log(findOutlier([0, 2, 2, 2, 13, 2, 2, 2, 2, 2, 2, 2, 2]));\n// console.log(findOutlier([0, 3, 13, 15, 2]));\n// console.log(findOutlier([2, 6]));\n\n// ? ATM machines allow 4 or 6 digit PIN codes and\n// ? PIN codes cannot contain anything but exactly 4 digits or exactly 6 digits.\n// ? If the function is passed a valid PIN string, return true, else return false.\n\nfunction validatePIN(str) {\n  if (str.length !== 4 && str.length !== 6) {\n    return false;\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] < '0' || str[i] > '9') {\n      return false;\n    }\n  }\n  return true;\n}\n// function validatePIN(pin) {\n//   return /^(\\d{4}|\\d{6})$/.test(pin);\n// }\n// console.log(validatePIN('098765'));\n// console.log(validatePIN(''));\n// console.log(validatePIN('123-'));\n// console.log(validatePIN('123a'));\n// console.log(validatePIN('123'));\n\n// ? An isogram is a word that ?? has no repeating letters,\n// ? consecutive or non - consecutive.Implement a function\n// ? that determines whether a string that contains only\n// ? letters is an isogram.Assume the empty string is an isogram.\n// ? Ignore letter case.\n\n// function isPangram(string) {\n//   const strArr = string.toLowerCase();\n//   const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\n//   for (let i = 0; i < alphabet.length; i++) {\n//     if (strArr.indexOf(alphabet[i]) < 0) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n// function isPangram(string) {\n//   string = string.toLowerCase();\n//   return 'abcdefghijklmnopqrstuvwxyz'.split('').every(function (x) {\n//     return string.indexOf(x) !== -1;\n//   });\n// }\nfunction isPangram(string) {\n  return 'abcdefghijklmnopqrstuvwxyz'\n    .split('')\n    .every(x => string.toLowerCase().includes(x));\n}\n// function isPangram(string) {\n//   return (string.match(/([a-z])(?!.*\\1)/gi) || []).length === 26;\n// }\n\n// console.log(isPangram('The quick brown fox jumps over the lazy dog.'));\n// console.log(isPangram('This is not a pangram.'));\n\n// Метод charAt() возвращает указанный символ из строки.\n\n// function Show(str) {\n//   return str\n//     .split(' ')\n//     .map(elem => elem[0].toUpperCase() + elem.slice(1))\n//     .join(' ');\n\n// .map(elem => elem.replace(elem[0], elem[0].toUpperCase()))\n// str.split(' ')\n//   .map(function (word) {\n//     return word.charAt(0).toUpperCase() + word.slice(1);\n//   })\n//   .join(' ');\n// }\n\n// Show(\"How can mirrors be real if our eyes aren't real\");\n\n// ?  People in bus, in /out/\n\n// let number = function (busStops) {\n//   let peopleIn = 0;\n//   let peopleOut = 0;\n\n//   busStops.map(item => {\n//     peopleIn += item[0];\n//     peopleOut += item[1];\n\n//     return peopleIn, peopleOut;\n//   });\n//   return peopleIn - peopleOut;\n// };\n\n// const number = busStops =>\n//     busStops.reduce((rem, [on, out]) => rem + on - out, 0);\n\nconst number = busStops => {\n  return busStops.reduce((people, next) => {\n    const [on, off] = next;\n    return people + on - off;\n  }, 0);\n};\n\n// console.log(\n//   number([\n//     [10, 0],\n//     [3, 5],\n//     [5, 8],\n//   ])\n// );\n\n// console.log(\n//   number([\n//     [3, 0],\n//     [9, 1],\n//     [4, 10],\n//     [12, 2],\n//     [6, 1],\n//     [7, 10],\n//   ])\n// );\n\n// ! https://www.codewars.com/kata/550f22f4d758534c1100025a\n// function dirReduc(arr) {\n//   const opposites = {\n//     NORTH: 'SOUTH',\n//     EAST: 'WEST',\n//     SOUTH: 'NORTH',\n//     WEST: 'EAST',\n//   };\n//   return arr.reduce(\n//     (acc, cur) => (\n//       opposites[acc.slice(-1)] === cur ? acc.pop() : acc.push(cur), acc\n//     ),\n//     []\n//   );\n// }\n// function dirReduc(plan) {\n//   const opposite = {\n//     NORTH: 'SOUTH',\n//     EAST: 'WEST',\n//     SOUTH: 'NORTH',\n//     WEST: 'EAST',\n//   };\n//   return plan.reduce((dirs, dir) => {\n//     if (dirs[dirs.length - 1] === opposite[dir]) dirs.pop();\n//     else dirs.push(dir);\n//     return dirs;\n//   }, []);\n// }\n\n// ? function anagrams(word, words) {\n// ? use map then use a callback function that checks\n// ? if all of the letters in word exist in words\n// ? include a check for length\n\n// function anagrams(word, words) {\n//   word = word.split('').join('');\n\n//   return words.filter(el => word == el.split('').sort().join(''));\n// }\n\n//   return words.filter(elem => {\n//     if (elem.length === word.length) {\n//       if (\n//         elem\n//           .split('')\n//           .sort()\n//           .join('')\n//           .toLowerCase()\n//           .includes(word.split('').sort().join('').toLowerCase())\n//       ) {\n//         return elem;\n//       }\n//     }\n//   });\n// }\n// function anagrams(word, words) {\n//   const modifWord = word.split('').sort().join('');\n//   return words.filter(item => item.split('').sort().join('') == modifWord);\n// }\nfunction anagrams(word, words) {\n  return words.filter(elem => '' + [...word].sort() === '' + [...elem].sort());\n}\n// console.log(anagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada']));\n// console.log(anagrams('racer', ['crazer', 'carer', 'racar', 'caers', 'racer']));\n// console.log(anagrams('laser', ['lazing', 'lazy', 'lacer']));\n\n// ? In this kata you are required to, given a string,\n// ? replace every letter with its position in the alphabet.\n// ? If anything in the text isn't a letter, ignore it and don't return it.\n// ? \"a\" = 1, \"b\" = 2,\n\n// function alphabetPosition(text) {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     const code = text.toUpperCase().charCodeAt(i);\n//     if (code > 64 && code < 91) result += code - 64 + ' ';\n//   }\n\n//   return result.slice(0, result.length - 1);\n// }\n// function alphabetPosition(text) {\n//   return text.split('').filter(v=>/[a-zA-Z]/.test(v)).map(v=>v.toLowerCase().charCodeAt(0)-96).join(' ');\n// }\n\nfunction alphabetPosition(text) {\n  return text\n    .toUpperCase()\n    .match(/[a-z]/gi)\n    .map(elem => elem.charCodeAt() - 64)\n    .join(' ');\n}\n\n// console.log(alphabetPosition(\"The sunset sets at twelve o'clock.\"));\n// console.log(alphabetPosition('The narwhal bacons at midnight.'));\n\n// ? Your task is to sort a given string.\n// ? Each word in the string will contain a single number.\n// ? This number is the position the word should have in the result.\n// ? Note: Numbers can be from 1 to 9. So 1 will be the first word (not 0).\n// ? If the input string is empty, return an empty string.\n// ? The words in the input String will only contain valid consecutive numbers.\n\n// ? \"is2 Thi1s T4est 3a\"  -->  \"Thi1s is2 3a T4est\"\n// ? \"4of Fo1r pe6ople g3ood th5e the2\"  -->  \"Fo1r the2 g3ood 4of th5e pe6ople\"\n\nfunction order(words = '') {\n  const copyStr = words;\n\n  return copyStr\n    .split(' ')\n    .sort((prev, next) => {\n      return prev.match(/\\d/) - next.match(/\\d/);\n    })\n    .join(' ');\n}\n\n// function order(words){\n//   return words.split(' ').sort(function(a, b){\n//       return a.match(/\\d/) - b.match(/\\d/);\n//    }).join(' ');\n// }\n// ! принять ЛЮБОЙ ОДИН символ в диапазоне, например,\n// ! [0 - 9] соответствует любой цифре;[A - Za - z]\n// ! соответствует любым прописным или строчным буквам.\n\n// console.log(order('is2 Thi1s T4est 3a'));\n// console.log(order('4of Fo1r pe6ople g3ood th5e the2'));\n// console.log(order(''));\n\n// ? Отримати дані з API та вивести їх на сторінку\n// ? http://universities.hipolabs.com/search?country=Ukraine\n// ? http://universities.hipolabs.com/search?country=United+States\n// ? https://github.com/Hipo/university-domains-list\n// function updateMarkup(data) {\n//   ref.innerHTML = data;\n// }\n(async () => {\n  try {\n    const resp = await fetch(\n      'http://universities.hipolabs.com/search?country=Ukraine'\n    );\n\n    const data = await resp.json();\n    // updateMarkup(data[0].name);\n  } catch (error) {\n    console.log('ERROR', error.message);\n  }\n})();\n\n// ? Отримати дані з API і вивести їх на сторінку\n// ? https://dog.ceo/dog-api/\n\n// Отримати дані з API і вивести їх на сторінку\n// https://randomuser.me/\n\n// const ref = document.querySelector('.list');\n\n// function updateMarkup(user) {\n//   const name = user.name.first;\n//   const img = user.picture.medium;\n//   const email = user.email;\n\n//   ref.innerHTML = `<img src=\"${img}\" alt=\"img\"/>\n//     <p>${name}</p>\n//     <p>${email}</p>`;\n// }\n\n// ? (async () => {\n//   try {\n//     const resp = await fetch('https://randoxmuser.me/api/ ');\n//     const data = await resp.json();\n//     const results = data.results;\n\n//     updateMarkup(results[0]);\n//   } catch (error) {\n//     console.log('ERROR', error.message);\n//   }\n// })();\n\n// ! <li></li>\n// ! <a></a>\n// ! <div></div>\n// ! <p></p>\n// ! <img src=\"\" alt=\"\"/>\n\n// const ref = document.querySelector('.list');\n// const URL = 'http://colormind.io/api/';\n// // Отримати дані з API та вивести їх на сторінку\n\n// (async () => {\n//   try {\n//     const resp = await fetch(URL, {\n//       method: 'POST',\n//       body: JSON.stringify({\n//         model: 'default',\n//       }),\n//     });\n//     const data = await resp.json();\n//     updateMarkup(data.result);\n//   } catch (error) {\n//     console.log('ERROR', error.message);\n//   }\n// })();\n\n// function updateMarkup(data) {\n//   const markup = data.map(\n//     item =>\n//       `<div style=\"background-color: rgb(${item})\" class=\"item\"></div>\n//     `\n//   );\n//   ref.innerHTML = markup.join('');\n// }\n\n// Отримати дані з API і вивести їх на сторінку\n//https://reqres.in/\n// const URL = 'https://reqres.in/api/users/2';\n\n// const ref = document.querySelector('.list');\n\n// (async () => {\n//   try {\n//     const resp = await fetch(URL, {\n//       method: 'put',\n//       body: JSON.stringify({\n//         name: 'Janet',\n//         job: 'Weaver',\n//       }),\n//     });\n\n//     const data = await resp.json();\n//     // console.log('data: ', data);\n\n//     // updateMarkup(data);\n//   } catch (error) {\n//     console.log('ERROR', error.message);\n//   }\n// })();\n\n// function updateMarkup(data) {\n//   const markup = data.map(\n//     item =>\n//       `<div class=\"item\">${item}</div>\n//     `\n//   );\n//   ref.textContent = markup.join('');\n// }\n\n// Отримати дані з API і вивести їх на сторінку\n// https://deckofcardsapi.com/\n\nconst URL = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1';\n\nconst ref = document.querySelector('.list');\n\n(async () => {\n  try {\n    const resp = await fetch(URL);\n    const { deck_id } = await resp.json();\n\n    const info = await fetch(\n      `https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=2  `\n    );\n    const { cards } = await info.json();\n\n    updateMarkup(cards);\n  } catch (error) {\n    console.log('ERROR', error.message);\n  }\n})();\n\nfunction updateMarkup(data) {\n  const mark = data\n    .map(({ image, code }) => `<img src=\"${image}\" alt=\"${code}\"/>`)\n    .join('');\n\n  ref.innerHTML = mark;\n}\n\n// ДЗ\n// Отримати дані з API і вивести їх на сторінку. Добавити стилі.\n// https://openweathermap.org/api\n\n// https://nordicapis.com/how-to-build-an-api-driven-weather-app/\n"],"names":["resp","fetch","json","error","console","log","message","$99c8f5021bcbbef2$var$ref","document","querySelector","deck_id","info","cards","data","mark","map","image","code","join","innerHTML","$99c8f5021bcbbef2$var$updateMarkup"],"version":3,"file":"index.131ddb5a.js.map"}